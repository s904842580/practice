8.11
jvm是Java虚拟机，最核心的部分
jre是Java的开发环境相当于jvm加上系统类库
jdk是Java的开发环境相当于jre加上开发工具
dos常用命令：
cd 盘符 -- 跳转盘符
dir     -- 展示当前文件夹
cd ..   -- 返回上一级
cd 目录 -- 进入文件
cls     -- 清屏
cd \    -- 退回盘符
exit    -- 清屏
cd 目录1\目录2\目录3 -- 进入多级目录

8.15
变量
定义：变量就是内存中的存储空间，存储空间中的数据是可以发生变化的
格式：数据类型(基本数据类型)  变量名称  =  变量值(字面量)
基本数据类型：
整型：
	byte类型又叫做字节类型，变量只占用一个字节内存
	short类型 短整型，占用两个字节内存-2^15~2^15 - 1,这个范围太小，一般不建议使用
	int类型 整型类型 占用四个字节-2^31~2^31 - 1
	long类型 长整型类型 占用八个字节-2^63~2^63 - 1,在初始化设定值时要在数字后面加上L或小写l，再不加的情况下平台会默认赋值赋的是int型数据
浮点型：
	float类型 单精度类型 占用四个字节。在使用时，使用float类型较少，其精度不够，在java中给float类型变量赋值时要在数字后面带上F或f，平台把小数默认为double类型数据
	double类型 双精度类型 占用八个字节 浮点数一般优先使用double
字符型：
	char类型 字符类型 占用两个字节空间 可以用来表示汉字
布尔类型：
	boolean类型 布尔类型 占用一个字节 只有两取值true和flase表示真和假
引用数据类型：
	字符串 String
	类 Class
        接口 interface
        数组 Array
算数运算符的特点
	整数和整数运算，最终结果也是整数。若想得到小数，必须由浮点型参加
	字符类型参加运算，底层是采用unicode编码进行计算
	数据类型大小范围byte --> short --> int --> long --> float --> double
	在运算过程中，只要遇到String参加的运算（+）,直接拼接，结果也是String

8.21
1.成员变量作用于类方法外，存放在堆内存，随着对象的存在而存在，随着对象的消失而消失，有默认的初始化值
局部变量作用于方法中，存放在栈内存，随着方法的调用而存在，随着方法用完而消失，没有默认的初始化值，必须是定义值才能使用
2.构造方法与类同名，没有返回值，不写void，每一个类都有默认的无参构造方法，自己写之后系统的无参构造方法失效
3.private修饰的成员只能在本类中访问，提高代码的安全性，若其它类想使用，只能间接的使用提供封装该变量的方法。该方法一般命名为 set/get成语变量名()

8.23
1. String()/String(String original)
API：
char charAt(int index) 返回指定索引处的 char值
int indexOf(String str) 返回指定子字符串第一次出现的字符串中的索引
int indexOf(String str,int fromIndex) 返回从fromIndex位置开始查找指定子字符串第一次出现的字符串中的索引
int length() :返回字符串的长度，返回值时int类型
boolean isEmpty() 返回 true如果，且仅当 length()为 0 
int lastIndexOf(int ch) 返回指定字符最后一次出现的字符串中的索引
String replace(char oldChar, char newChar) 返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar
String replaceAll(String regex, String replacement) 将给定替换的给定 regular expression匹配的此字符串的每个子字符串替换
String trim() 返回一个字符串，其值为此字符串，删除了所有前导和尾随空格
2.
Date(); 分配 Date对象并对其进行初始化，使其表示分配时间，测量 Date到毫秒
Date(long date) 分配 Date对象并初始化它以表示自标准基准时间（称为“纪元”）以来的指定毫秒数，即1970年1月1日00:00:00 GMT
API:
    long getTime() 返回自此 Date对象表示的1970年1月1日00:00:00 GMT以来的毫秒数
    void setTime(long time) 将此 Date对象设置为表示格林尼治标准时间1970年1月1日00:00:00之后的 time毫秒的时间点
3.
数组就是存储相同数据类型的多个数据的容器是多个相同类型数据按一定顺序排列的集合
特点：数组必须初始化后才能使用
静态初始化：数组定义时就确定数组的长度以及数组具体存储的内容
动态初始化：数组定义时，不确定需要存储的内容
数组的索引从0开始，并且是连续的，每次递增1

8.24
1.在父子类中，方法名和参数列表完全相同的方法叫做方法的重写
	a.父类私有的方法不能被重写，父类私有的变量也不能被继承
	b.父类中的静态方法不能被重写
	c.子类重写父类的方法时，子类修饰符的访问权限必须大于等于父类
	d.当返回值是非基本类型时，子类的返回值类型要小于等于父类的返回值类型
	e.子类抛出的异常要小于等于父类抛出的异常
2.子类可以使用父类的变量和方法，子类也可定义自己的变量和方法
	查找变量遵循就近原则：现在局部变量，再找成员变量，再找父类中的变量
	在局部变量，成员变量，父类中的变量都存在，想使用成员变量使用this关键字
	在局部变量，成员变量，父类中的变量都存在，想使用父类变量使用super关键字
3.static是java的一种修饰符，表示静态。可以修饰成员方法/变量，又叫静态方法/变量
   a.被类的所有对象共享
   b.静态资源属于类，随着类的加载而加载。加载时机早于对象
   c.静态资源可以使用 类名.资源名 调用
4.可以继承
为了初始化从父类那里继承来的成员变量，需要调用父类的构造方法
调用父类构造方法可用super关键字

8.27周总结
面向对象的三大特征：封装、继承、多态
一、封装
	概念：面向对象是现实世界的一个模拟，在程序中的成员变量一般设计为私有
	原则：不允许外界直接访问。但是对象提供了公开的方法get/setXxx()方法，用间接的方法访问私有的成员变量
	优点：提高代码安全性以及复用性
二、继承
	概念：即子类可以使用父类的变量和方法，当然，子类也可以定义自己的变量和方法
	格式：通过extends关键字实现继承的效果 子类 extends 父类
Class  A{}  //父类
CLass B extends A{}  // 子类
	优缺点：子类可以使用父类的非私有成员（成员变量以及成员方法）
               优点：可以提高代码的复用性，以及代码的可维护性
                缺点：继承具有一定绑定关系（耦合）
	特点：
		1.Jaa中只支持单继承，不支持多继承	
		2.支持多层次继承
	继承中变量的访问：
		查找变量遵循就近原则：现在局部变量，再找成员变量，再找父类中的变量
        	在局部变量，成员变量，父类中的变量都存在，想使用成员变量使用this关键字
        	在局部变量，成员变量，父类中的变量都存在，想使用父类变量使用super关键字
	构造方法：
		在父子类中，子类的构造方法首行默认有一个super()； 即调用父类的无参构造
	重写：
		概念：在父子类中，方法名和参数列表完全相同的方法叫做方法的重写！
        	应用场景：继承了父类方法的结构，在方法体中修改子类特定的功能
        	校验：使用 @Override 。 但是开发工具自带校验功能
	重写注意事项：
		a.父类私有的方法不能被重写，父类私有的变量也不能被继承
		b.父类中的静态方法不能被重写
		c.子类重写父类的方法时，子类修饰符的访问权限必须大于等于父类
		d.当返回值是非基本类型时，子类的返回值类型要小于等于父类的返回值类型
		e.子类抛出的异常要小于等于父类抛出的异常
三、多态
	概念：同一个对象，在不同时刻变现出来的不同形态
	条件：
		要有继承/实现关系
		要有方法重写
		要有父类引用指向子类对象
	特点：
		成员变量编译看左边、运行看左边
		成员方法编译看左边、运行看右边
	优缺点：
		优点：提高代码扩展性
		定义方法时，如果将父类型作为参数，在使用方法时，可以传递给子类对象
		缺点：不能使用子类特有的成员
1.成员变量和局部变量的区别：
类位置	   成员变量：方法外	局部变量：方法内
内存位置    	     堆内存		  栈内存
生命周期   随着对象存在而存在	随着方法的调用而存在
初始化值   有默认的初始化值	没有默认的值，必须先定义
2.private：
	概念：private是一个修饰符，用来限制成员的访问
	特点：private修饰的成员只能在本类中访问，若其他类想使用，只能间接的使用提供封装该变量的方法该方法一般命名为 set/get成语变量名();
        例如：

                public int getPassword(){

                        return password;

                }

                public void setPassword(String pwd){

                        password = pwd;

                }

        get/set快捷键：alt + insert
3.this：
	1.限定变量只代成员变量
		方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量
	2.this使用时机
		当成员变量和形参同名时，用于限定成员变量时使用this
	3.方法被哪个对象调用，this就代表哪个对象
4.构造方法
概念：与类同名，无返回值类型，也不写void。

        特点：每个类都有一个默认的无参构造方法，即不写构造方法会给你一个无参构造。

                  当自己添加了构造方法，系统不再默认有构造方法。

        作用：给成员变量初始化！

        重载：可以重载，通过this关键字实现构造方法之间的调用。构造方法调用不能造成死循环
5.JavaBean 
概念：一个标准的Java类
        特点：
                a.成员变量由private修饰
                b.提供set/getXxx()
                c.提供无参构造方法
6.String
	概念：字符串的实例对象
	格式：String str = new String("abc");  String str = "abc";
	构造：
    String()/String(String original)
	api:
    		char charAt(int index) 返回指定索引处的 char值。
   		int indexOf(String str) 返回指定子字符串第一次出现的字符串中的索引。
    		int indexOf(String str,int fromIndex) 返回从fromIndex位置开始查找指定子字符串第一次出现的字符串中的索引。
   		 int length() :返回字符串的长度，返回值时int类型
  		boolean isEmpty() 返回 true ，当且仅当， length()是 0 。
    		int lastIndexOf(int ch) 返回指定字符最后一次出现的字符串中的索引。
   		String replace(char oldChar, char newChar) 返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar 。
    		String replaceAll(String regex, String replacement) 将给定替换的给定 regular expression匹配的此字符串的每个子字符串替换。
    		String trim() 返回一个字符串，其值为此字符串，删除了所有前导和尾随空格
7.自动拆装箱
	装箱： int --> Integet
	拆箱： Integer --> int
8.Date
    来源：java.util.Date
概念：Date类表示特定的时刻，精度为毫秒。
构造：
    Date(); 分配 Date对象并对其进行初始化，使其表示分配时间，测量 Date到毫秒。
    Date(long date) 分配 Date对象并初始化它以表示自标准基准时间（称为“纪元”）以来的指定毫秒数，即1970年1月1日00:00:00 GMT
API:
    long getTime() 返回自此 Date对象表示的1970年1月1日00:00:00 GMT以来的毫秒数
    void setTime(long time) 将此 Date对象设置为表示格林尼治标准时间1970年1月1日00:00:00之后的 time毫秒的时间点
9.SimpleDateFormat
    来源：软件包  java.text Class SimpleDateFormat
    概念：是一个用于以区域设置敏感的方式格式化和解析日期的具体类。 它允许格式化（日期→文本），解析（文本→日期）和规范化。就是将日期转换为文本（ Wed Aug 23 11:28:38 CST 2023 --> 2023年08月23日 11:28：38） -->格式化
    构造：SimpleDateFormat(String pattern) 构造一个 SimpleDateFormat使用给定的模式和默认的默认日期格式符号 FORMAT区域设置。
    api:
        StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition pos)
        将给定的 Date为日期/时间字符串，并将结果附加到给定的 StringBuffer 。  // 日期--> 文本
        Date parse(String text, ParsePosition pos) 解析字符串中的文本以生成 Date 。  // 文本--> 日期
10.数组
    概念：存储相同数据类型的多个数据就容器
    格式：
        int [] arr; 定义了一个int类型的数组，名字叫arr （推荐）
        int arr[]; 定义了一个int类型的变量，名字叫arr数组
    初始化：
        概念：数组必须初始化后才能使用，所谓的初始化就是给元素（元素就是数组中的具体数据）分配内容空间
        格式：
            静态初始化：数组定义时就确定数组的长度以及数组具体存储的内容
                int [] arr = new int[]{1,2,3};
                int [] arr = {1,2,3};
            动态初始化：数组定义时，不确定需要存储的内容
                int [] arr = new int[5];
        访问：
            int [] arr = new int []{7,2,9};
            数组的访问：
                变量名 arr
            数组中元素的访问：
                变量名[索引] arr[2]
            索引：连续的整数数字编号
                特点：索引从0开始，并且是连续的，每次递增1
11.二维数组
    概念：二维数组的元素为一维数组，即存储数组的数组。
    格式：
        int [][] arr; 推荐
        int [] arr[];
        int arr[][];
    初始化：
        静态初始化：
            int [][] arr = new int[][]{{1,2,3},{4,5,6},{7,8,9}};
            int [][] arr = {{1,2,3},{4,5,6},{7,8,9}};
        动态初始化：
            int [] [] arr = new int [2][3];

        访问：
            数组，直接使用arr即可
            一维数组，arr[index] --> 数组类型，即引用类型  null
            二维数组，arr[index][index] --> int  0
    遍历：
        int [][]arr = {{4,3,8},{2,5,9}};
        for(int i = 0, i<2 ; i++){
           //arr[0] --> {4,3,8}
            for(int j = 0; j<3; j ++){
                sout(arr[i,j])
                sout(arr[i,j])
                sout(arr[i,j])
            }
        }
12.static
        概念：java的一种修饰符，表示静态。可以修饰成员方法/变量，又叫静态方法/变量。
        特点：
                a.被类的所有对象共享
		b.静态资源属于类，随着类的加载而加载。加载时机早于对象
		c.静态资源可以使用 类名.资源名 调用
13.访问控制符
	public > protected > 默认 > private
default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。
private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）
public : 对所有类可见。使用对象：类、接口、变量、方法
protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。
14.抽象方法
	概念：抽取子类的公关方法后，发现无法定义方法体中具体的参数，所以就不在要方法体，此时该方法有abstract修饰，即抽象方法
	格式：public abstract 返回值类型 方法名();
15.抽象类
	概念：含有抽象方法的类就是抽象类
	格式：abstract class 类名{}
	注意：
		a.抽象类不能实例化，即不能创建对象
		b.含有抽象方法的类一定是抽象类；抽象类不一定含有抽象方法
		c.抽象类可以有构造方法
		d.抽象类的子类
			重写父类中所有的抽象方法
			把自己也变成抽象类
16.final
	概念：表示最终的，最后的。可以修饰类，方法，变量
	修饰类：该类不能被继承
	修饰方法：方法不能被重写
	修饰变量：变量一旦赋值，就不能再次修改
		基本类型是数值本身不能改
		应用类型是地址值不能改变
17.代码块
	概念：在java用，有{} 包围的代码就是代码块
	分类：
		局部代码块：
			定位：方法内
			作用：限定变量的声明周期，提前释放无用的变量，节约内存
			执行时间：调用方法
		构造代码块：
			定位：类内方法外
			作用：提取构造方法中相同的代码块，提高代码复用率
			执行时机：在创建对象和执行构造方法之间
		静态代码块：
			定位：类内方法外
			作用：做公共资源的初始化
			执行时机：有static修饰，随着类的加载而加载，并且只执行一次
18.接口
	概念：接口是一个标准的规范，只定义规范，不管具体实现
	特点：
		a.接口是特殊的抽象类
		b.抽象方法必须是public abstract，所以可以省略不写
		c.一个类可以实现多个接口，接口之间使用逗号隔开
		d.接口与接口之间是继承关系，并且是多继承
		e.抽象类和接口之间是继承关系，并且是多继承
	格式：interface A{};  interface B{};
	使用：class M implements A,B{}
	接口中的成员组成：
		 a.成员变量，必须由public static final，这样的变量叫做常量，变量名全大写
		b.接口中没有构造方法
		c.成员方法
8.31
1.boolean  add( Object obj ) ; 向集合中添加元素。添加成功返回ture
boolean contains(Object obj); 判断obj是否在集合中存在，存在返回true
int size(); 返回集合的长度。类似于数组的length。
void clear(); 清空集合boolean isEmpyt(); 判断集合是否为空
boolean addAll(Collection coll)；一次添加一个集合
boolean containsAll(Collection coll); 判断是否包含另外一个集合
2.迭代器概念：用于遍历集合的一种方式。迭代器定义在Iterable接口中定义的
.hasNext():问集合中有没有元素？有返回true，没有返回false
.next():取元素
.remove():删除元素。删除当前元素后指针会向前跳一个位置

9.4
1.解释set集合是无序且不可重复
当我们创建了set集合（集合初始长度16为数组）后，会在内存中开辟一个加载因子为0.75（向集合中添加元素个数超过75%时，长度扩大一倍），长度为16的一个空间；
添加元素时，首先获取元素的hash值，根据hash值，计算应存储的位置。当添加的内容发生hash冲突时，使用equals进行比较；
当equals比较相同，才会认为是相同元素，set集合不会添加该重复元素；
hash值相同的元素会挂在同一个位置下面，形成链条。在jdk8以后，当链条的长度大于8后，链条会换成红黑树。
2.map集合的特点是什么，如何遍历map集合
map是双列集合，可以存储键值对，即同时存储键和值两个元素
第一种方式通过Map.keySet使用iterator遍历
Iterator<Integer> iterator = map.KeySet().iterator();
while(iterator.hasNext()){
	Integer key = iterator.next();
	String value = map.get(key);
	System.out.println("key = " + key + ",value = " + value);
第二种方式通过Map.entrySet使用Iterator遍历
Iterator<Map.Entry<Integer, String>> entries = map.entrySet().iterator();
    while (entries.hasNext()) {
        Map.Entry<Integer, String> entry = entries.next();
        System.out.println(entry);
第三种方式通过Map.keySet遍历
for (Integer key : map.keySet()) {
       System.out.println("key = " + key + ", value = " + map.get(key));